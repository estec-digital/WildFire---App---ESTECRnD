import requests
import smtplib, logging, sys
import time, traceback
from email.mime.text import MIMEText
from datetime import datetime  
import json
import os, ctypes

def disable_quick_edit():
    if sys.platform == "win32":
        import msvcrt
        kernel32 = ctypes.windll.kernel32
        hStdin = kernel32.GetStdHandle(-10)
        mode = ctypes.c_uint()
        kernel32.GetConsoleMode(hStdin, ctypes.byref(mode))
        new_mode = mode.value & ~0x0040  # Disable ENABLE_QUICK_EDIT_MODE
        kernel32.SetConsoleMode(hStdin, new_mode)

def emailSenderReciever(json_path):
    if not os.path.exists(json_path):
        logger.error(f"[CONFIG] File not found: {json_path}")
        raise FileNotFoundError(f"Could not find {json_path}")

    try:
        with open(json_path, "r", encoding="utf-8") as f:
            config = json.load(f)

        if config.get("project") != "DuAnChayRung":
            logger.warning("[CONFIG] Wrong key 'project'.")
            raise ValueError("Invalid project key in JSON.")

        sender_email = config.get("Email_sender", "")
        sender_password = config.get("Email_password", "")

        if not sender_email or not sender_password:
            raise ValueError("Email sender or password is missing in config file.")

        return sender_email, sender_password

    except json.JSONDecodeError as e:
        logger.error(f"[CONFIG] JSON decode error: {e}")
        raise
    except Exception as e:
        logger.error(f"[EMAIL CONFIG ERROR] {e}")
        raise
sys.stdout.reconfigure(line_buffering=True)
sys.stderr.reconfigure(line_buffering=True)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s:%(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("camera_and_sql_service.log", encoding="utf-8", mode='a')
    ]
)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh email
input_json_path = 'D:/ChayRungProject/FireDetector/input.json'
with open(input_json_path, 'r', encoding='utf-8') as file:
    data = json.load(file)
sender_email, sender_password = emailSenderReciever(input_json_path)
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
EMAIL_SENDER = sender_email
EMAIL_PASSWORD = sender_password

# Danh s√°ch email ng∆∞·ªùi nh·∫≠n
EMAIL_RECEIVERS = data["Email_receivers"]

# URL c·∫ßn ki·ªÉm tra
URL = "http://estecsocson.ddns.net:81/doc/index.html#/preview"

# Tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ c·ªßa website (ban ƒë·∫ßu gi·∫£ ƒë·ªãnh website ho·∫°t ƒë·ªông)
last_status = "success"

def send_email(subject, body):
    """H√†m g·ª≠i email ƒë·∫øn nhi·ªÅu ng∆∞·ªùi nh·∫≠n"""
    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = EMAIL_SENDER
    msg["To"] = ", ".join(EMAIL_RECEIVERS)  

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.sendmail(EMAIL_SENDER, EMAIL_RECEIVERS, msg.as_string())
        server.quit()
        #print(f"üì© ƒê√£ g·ª≠i email ƒë·∫øn: {', '.join(EMAIL_RECEIVERS)} - {subject}")
        logger.info(f"ƒê√£ g·ª≠i email ƒë·∫øn: {', '.join(EMAIL_RECEIVERS)} - {subject}")
    except Exception as e:
        #print(f"‚ùå L·ªói khi g·ª≠i email: {e}")
        logger.error(f"Sending email error {e} ")

def check_website():
    """Ki·ªÉm tra tr·∫°ng th√°i website"""
    global last_status  

    try:
        response = requests.get(URL, timeout=10)  
        if response.status_code == 200:
            #print("‚úÖ Website ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.")
            logger.info(f" Website working as normal")
            if last_status == "error":  # N·∫øu tr∆∞·ªõc ƒë√≥ b·ªã l·ªói, gi·ªù ho·∫°t ƒë·ªông l·∫°i th√¨ g·ª≠i mail
                send_email("‚úÖ Website ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i!", "H·ªá th·ªëng ch√°y r·ª´ng t·∫°i S√≥c S∆°n ƒë√£ c√≥ ƒëi·ªán tr·ªü l·∫°i.")
            last_status = "success"
        else:
            error_message = f"‚ö† Website g·∫∑p s·ª± c·ªë, h·ªá th·ªëng ƒëang m·∫•t ƒëi·ªán!"
            #print(error_message)
            logger.info(f"System have problem {error_message}")
            if last_status == "success":  # Ch·ªâ g·ª≠i email n·∫øu tr·∫°ng th√°i thay ƒë·ªïi t·ª´ t·ªët ‚Üí l·ªói
                error_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # L·∫•y th·ªùi gian khi s·ª± c·ªë x·∫£y ra
                send_email("‚ö† H·ªÜ TH·ªêNG G·∫∂P S·ª∞ C·ªê!", 
                           f"H·ªá th·ªëng ch√°y r·ª´ng ƒëang m·∫•t ƒëi·ªán. L√∫c {error_time}, website kh√¥ng truy c·∫≠p ƒë∆∞·ª£c.")
            last_status = "error"
    except requests.RequestException as e:
        error_message = f"‚ùå Website kh√¥ng truy c·∫≠p ƒë∆∞·ª£c! H·ªá th·ªëng ch√°y r·ª´ng m·∫•t ƒëi·ªán"
        #print(error_message)
        logger.error(f"system have problem and cannot access")
        if last_status == "success":  # Ch·ªâ g·ª≠i email n·∫øu tr·∫°ng th√°i thay ƒë·ªïi t·ª´ t·ªët ‚Üí l·ªói
            error_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # L·∫•y th·ªùi gian khi s·ª± c·ªë x·∫£y ra
            send_email("‚ùå H·ªÜ TH·ªêNG G·∫∂P S·ª∞ C·ªê!", 
                       f"H·ªá th·ªëng m·∫•t ƒëi·ªán. L√∫c {error_time}, kh√¥ng th·ªÉ truy c·∫≠p website. "
                       "C√°ch kh·∫Øc ph·ª•c:1. Ki·ªÉm tra l·∫°i ngu·ªìn ƒëi·ªán 2. Ki·ªÉm tra l·∫°i modem 3. Ki·ªÉm tra l·∫°i camera 4. Ki·ªÉm tra l·∫°i server")
        last_status = "error"

if __name__ == '__main__':
    disable_quick_edit()

    #print("üïí Script ƒëang ch·∫°y, ki·ªÉm tra website m·ªói 60 gi√¢y...")
    logger.info(f" System observing every 5 minutes")
    try:
        # V√≤ng l·∫∑p ki·ªÉm tra li√™n t·ª•c
        while True:
            check_website()  # Ki·ªÉm tra website m·ªói 60 gi√¢y
            time.sleep(300)  # Ch·ªù 60 gi√¢y r·ªìi ki·ªÉm tra l·∫°i
    except KeyboardInterrupt:
        logger.warning("[MAIN] Interrupted by user. Exiting...")
        #print("Interrupt for exit")

    except Exception as e:
        logger.error(f"[MAIN ERROR] {e}")
        traceback.print_exc()
        time.sleep(60)